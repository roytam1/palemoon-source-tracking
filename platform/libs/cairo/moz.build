# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

CONFIGURE_SUBST_FILES += ['src/cairo-features.h']

DEFINES['PACKAGE_VERSION'] = '"moz"'
DEFINES['PACKAGE_BUGREPORT'] = '"http://bugzilla.mozilla.org/"'

for var in ('CAIRO_HAS_PTHREAD', '_GNU_SOURCE'):
  DEFINES[var] = True

for var in ('MOZ_TREE_CAIRO', 'MOZ_TREE_PIXMAN'):
  if CONFIG[var]:
      DEFINES[var] = True

# Normally determined by cairo's configure script.
DEFINES['HAVE_UINT64_T'] = True

if CONFIG['MOZ_TREE_FREETYPE']:
  DEFINES['HAVE_FT_LIBRARY_SETLCDFILTER'] = True
  DEFINES['FT_LCD_FILTER_H'] = '%s/modules/freetype2/include/freetype/ftlcdfil.h' % TOPSRCDIR

EXPORTS.cairo += [
  '!src/cairo-features.h',
  'src/cairo-deprecated.h',
  'src/cairo-pdf.h',
  'src/cairo-platform.h',
  'src/cairo-rename.h',
  'src/cairo-tee.h',
  'src/cairo-version.h',
  'src/cairo.h',
  'src/pixman-rename.h',
]

SOURCES += [
  'src/cairo-analysis-surface.c',
  'src/cairo-arc.c',
  'src/cairo-array.c',
  'src/cairo-atomic.c',
  'src/cairo-base64-stream.c',
  'src/cairo-base85-stream.c',
  'src/cairo-bentley-ottmann-rectangular.c', # redefinition of '_cairo_bo_trap'
  'src/cairo-bentley-ottmann-rectilinear.c', # redefinition of '_cairo_bo_trap'
  'src/cairo-bentley-ottmann.c', # redefinition of '_cairo_bo_trap'
  'src/cairo-botor-scan-converter.c',
  'src/cairo-boxes.c',
  'src/cairo-cache.c',
  'src/cairo-cff-subset.c',
  'src/cairo-clip.c',
  'src/cairo-color.c',
  'src/cairo-composite-rectangles.c',
  'src/cairo-debug.c',
  'src/cairo-deflate-stream.c',
  'src/cairo-device.c',
  'src/cairo-fixed.c',
  'src/cairo-font-face-twin-data.c',
  'src/cairo-font-face-twin.c',
  'src/cairo-font-face.c',
  'src/cairo-font-options.c',
  'src/cairo-freed-pool.c',
  'src/cairo-freelist.c',
  'src/cairo-gstate.c',
  'src/cairo-hash.c',
  'src/cairo-hull.c',
  'src/cairo-image-info.c',
  'src/cairo-image-surface.c',
  'src/cairo-lzw.c',
  'src/cairo-matrix.c',
  'src/cairo-misc.c',
  'src/cairo-mutex.c',
  'src/cairo-observer.c',
  'src/cairo-output-stream.c',
  'src/cairo-paginated-surface.c',
  'src/cairo-path-bounds.c',
  'src/cairo-path-fill.c',
  'src/cairo-path-fixed.c',
  'src/cairo-path-in-fill.c',
  'src/cairo-path-stroke.c',
  'src/cairo-path.c',
  'src/cairo-pattern.c',
  'src/cairo-pdf-operators.c',
  'src/cairo-pdf-surface.c',
  'src/cairo-pen.c',
  'src/cairo-polygon.c',
  'src/cairo-recording-surface.c',
  'src/cairo-rectangle.c',
  'src/cairo-rectangular-scan-converter.c',
  'src/cairo-region.c',
  'src/cairo-scaled-font-subsets.c',
  'src/cairo-scaled-font.c',
  'src/cairo-slope.c',
  'src/cairo-spans.c',
  'src/cairo-spline.c',
  'src/cairo-stroke-style.c',
  'src/cairo-surface-clipper.c',
  'src/cairo-surface-fallback.c',
  'src/cairo-surface-offset.c',
  'src/cairo-surface-snapshot.c',
  'src/cairo-surface-subsurface.c',
  'src/cairo-surface-wrapper.c', #  redefinition of '_copy_transformed_pattern'
  'src/cairo-surface.c',
  'src/cairo-tee-surface.c',
  'src/cairo-tor-scan-converter.c',
  'src/cairo-toy-font-face.c',
  'src/cairo-traps.c',
  'src/cairo-truetype-subset.c',
  'src/cairo-type1-fallback.c',
# 'src/cairo-type1-subset.c', should be here, but it's only supported on freetype platforms
  'src/cairo-type3-glyph-surface.c',
  'src/cairo-unicode.c',
  'src/cairo-user-font.c',
  'src/cairo-version.c',
  'src/cairo-wideint.c',
  'src/cairo.c',
]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
  EXPORTS.cairo += ['src/cairo-win32.h']
  DEFINES['DISABLE_SOME_FLOATING_POINT'] = True
  DEFINES['CAIRO_WIN32_STATIC_BUILD'] = True
  SOURCES += [
    'src/cairo-dwrite-font.cpp',
    'src/cairo-win32-font.c',
    'src/cairo-win32-surface.c',
  ]
  if CONFIG['_MSC_VER']:
    CFLAGS += [
      '-wd4005', # 'WIN32_LEAN_AND_MEAN' : macro redefinition
      '-wd4018', # '>' : signed/unsigned mismatch
      '-wd4047', # different levels of indirection
      '-wd4101', # unreferenced local variable
      '-wd4133', # 'function' : incompatible types
      '-wd4146', # unary minus operator applied to unsigned type
      '-wd4311', # 'variable' : pointer truncation from 'type' to 'type'
      '-wd4477', # format string '%s' requires an argument of type 'type'
      '-wd4996', # The compiler encountered a deprecated declaration.
    ]
    CXXFLAGS += [
      '-wd4005', # 'WIN32_LEAN_AND_MEAN' : macro redefinition
      '-wd4018', # '>' : signed/unsigned mismatch
      '-wd4146', # unary minus operator applied to unsigned type
      '-wd4828', # illegal in the current source character set
      '-wd4838', # requires a narrowing conversion
  ]
  if CONFIG['MOZ_ENABLE_D2D_SURFACE']:
    SOURCES += ['src/cairo-d2d-surface.cpp']
  if CONFIG['NS_PRINTING']:
    SOURCES += ['src/cairo-win32-printing-surface.c']
  else:
    DEFINES['CAIRO_OMIT_WIN32_PRINTING'] = True
elif 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:
  EXPORTS.cairo += ['src/cairo-ps.h']
  SOURCES += ['src/cairo-ps-surface.c']
  if CONFIG['GNU_CC']:
    DEFINES['HAVE_CXX11_ATOMIC_PRIMITIVES'] = True
    # We would normally use autoconf to set these up, using AC_CHECK_SIZEOF.
    # But AC_CHECK_SIZEOF requires running programs to determine the sizes,
    # and that doesn't work so well with cross-compiling.  So instead we
    # use these magic macros, available since at least GCC 4.3, to define
    # the preprocessor macros cairo wanted from autoconf.
    DEFINES['SIZEOF_VOID_P'] = '__SIZEOF_POINTER__'
    DEFINES['SIZEOF_INT'] = '__SIZEOF_INT__'
    DEFINES['SIZEOF_LONG'] = '__SIZEOF_LONG__'
    DEFINES['SIZEOF_LONG_LONG'] = '__SIZEOF_LONG_LONG__'
    CFLAGS += [
      '-Wno-enum-compare',
      '-Wno-int-to-pointer-cast',
      '-Wno-sign-compare',
      '-Wno-type-limits',
      '-Wno-missing-field-initializers',
      '-Wno-conversion',
      '-Wno-unused-but-set-variable',
    ]
  if CONFIG['MOZ_X11']:
    EXPORTS.cairo += [
      'src/cairo-xlib-xrender.h',
      'src/cairo-xlib.h',
    ]
    SOURCES += [
      'src/cairo-xlib-display.c',
      'src/cairo-xlib-screen.c',
      'src/cairo-xlib-surface.c',
      'src/cairo-xlib-visual.c',
    ]
    CFLAGS += CONFIG['XCFLAGS']
  if CONFIG['MOZ_ENABLE_CAIRO_FT']:
    EXPORTS.cairo += ['src/cairo-ft.h']
    SOURCES += [
      'src/cairo-ft-font.c',
      'src/cairo-type1-subset.c',
    ]
    CFLAGS += CONFIG['CAIRO_FT_CFLAGS']
    CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']

LOCAL_INCLUDES += ['!src', 'src']

# We allow warnings for third-party code that can be updated from upstream.
ALLOW_COMPILER_WARNINGS = True

FINAL_LIBRARY = 'gremedia'
