/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsISMimeVerificationListener;

[ptr] native UnsignedCharPtr(unsigned char);

/*
 * This interface is currently not marked scriptable,
 * because its verification functions are meant to look like those
 * in nsICMSMessage. At the time the ptr type is eliminated in both
 * interfaces, both should be made scriptable.
 */

[uuid(b21a3636-2287-4b9f-9a22-25f245981ef0)]
interface nsICMSMessage2 : nsISupports
{
  /**
    * Async version of nsICMSMessage::VerifySignature.
    * Code will be executed on a background thread and
    * availability of results will be notified using a
    * call to nsISMimeVerificationListener.
   */
  void asyncVerifySignature(in nsISMimeVerificationListener listener);

  /**
    * Async version of nsICMSMessage::VerifyDetachedSignature.
    * Code will be executed on a background thread and
    * availability of results will be notified using a
    * call to nsISMimeVerificationListener.
    *
    * We are using "native unsigned char" ptr, because the function
    * signatures of this one and nsICMSMessage::verifyDetachedSignature
    * should be the identical. Cleaning up nsICMSMessages needs to be
    * postponed, because this async version is needed on MOZILLA_1_8_BRANCH.
    *
    * Once both interfaces get cleaned up, the function signature should
    * look like:
    *     [array, length_is(aDigestDataLen)]
    *     in octet aDigestData,
    *     in unsigned long aDigestDataLen);
    *
    * Set aDigestType to one of the values from nsICryptoHash.
   */
  void asyncVerifyDetachedSignature(in nsISMimeVerificationListener listener,
                                    in UnsignedCharPtr aDigestData,
                                    in unsigned long aDigestDataLen,
                                    in int16_t aDigestType);
};

[uuid(5226d698-0773-4f25-b94c-7944b3fc01d3)]
interface nsISMimeVerificationListener : nsISupports {

  /**
   *  Notify that results are ready, that have been requested
   *  using nsICMSMessage2::asyncVerify[Detached]Signature()
   *
   *  verificationResultCode matches synchronous result code from
   *  nsICMSMessage::verify[Detached]Signature
   */
  void notify(in nsICMSMessage2 verifiedMessage,
              in nsresult verificationResultCode);
};

